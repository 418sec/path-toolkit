{"version":3,"file":"tk-umd.js","sources":["tk.js"],"sourcesContent":["// Parsing, tokeninzing, etc\n'use strict';\n\n// Some constants for convenience\nvar UNDEF = (function(u){return u;})();\nvar WILDCARD = '*';\n\n// Object for storing cached tokenized paths.\n// Key = string path\n// Value = tokens\nvar cache = {};\n\n// Default settings\nvar useCache = true,  // cache tokenized paths for repeated use\n    advanced = false, // not yet implemented\n    force = false;    // create intermediate properties during `set` operation\n\n    // Default prefix special characters\nvar prefixes = {\n        '<': {\n            'exec': 'parent'\n        },\n        '~': {\n            'exec': 'root'\n        },\n        '%': {\n            'exec': 'placeholder'\n        },\n        '@': {\n            'exec': 'context'\n        }\n    },\n    // Default separator special characters\n    separators = {\n        '.': {\n            'exec': 'property'\n            },\n        ',': {\n            'exec': 'collection'\n            }\n    },\n    // Default container special characters\n    containers = {\n        '[': {\n            'closer': ']',\n            'exec': 'property'\n            },\n        '\\'': {\n            'closer': '\\'',\n            'exec': 'quote'\n            },\n        '\"': {\n            'closer': '\"',\n            'exec': 'quote'\n            },\n        '(': {\n            'closer': ')',\n            'exec': 'call'\n            },\n        '{': {\n            'closer': '}',\n            'exec': 'evalProperty'\n            }\n    };\n\n// Lists of special characters for use in regular expressions\nvar prefixList = Object.keys(prefixes),\n    propertySeparator = '.',\n    separatorList = Object.keys(separators),\n    containerList = Object.keys(containers),\n    containerCloseList = containerList.map(function(key){ return containers[key].closer; });\n\n// Find all special characters except property separator (. by default)\nvar simplePathChars = '[\\\\\\\\' + [WILDCARD].concat(prefixList).concat(separatorList).concat(containerList).join('\\\\').replace(/\\\\?\\./, '') + ']';\nvar simplePathRegEx = new RegExp(simplePathChars);\n\n// Find all special characters, including backslash\nvar allSpecials = '[\\\\\\\\\\\\' + [WILDCARD].concat(prefixList).concat(separatorList).concat(containerList).concat(containerCloseList).join('\\\\') + ']';\nvar allSpecialsRegEx = new RegExp(allSpecials, 'g');\n\n// Find all escaped special characters\nvar escapedSpecialsRegEx = new RegExp('\\\\'+allSpecials, 'g');\n// Find all escaped non-special characters, i.e. unnecessary escapes\nvar escapedNonSpecialsRegEx = new RegExp('\\\\'+allSpecials.replace(/^\\[/,'[^'));\n\n// Find wildcard character\nvar wildcardRegEx = new RegExp('\\\\'+WILDCARD);\n\n/**\n * Private Function\n * Tests whether a wildcard templates matches a given string.\n * ```javascript\n * var str = 'aaabbbxxxcccddd';\n * wildCardMatch('aaabbbxxxcccddd'); // true\n * wildCardMatch('*', str); // true\n * wildCardMatch('*', ''); // true\n * wildCardMatch('a*', str); // true\n * wildCardMatch('aa*ddd', str); // true\n * wildCardMatch('*d', str); // true\n * wildCardMatch('*a', str); // false\n * wildCardMatch('a*z', str); // false\n * ```\n * @param  {String} template Wildcard pattern\n * @param  {String} str      String to match against wildcard pattern\n * @return {Boolean}          True if pattern matches string; False if not\n */\nvar wildCardMatch = function(template, str){\n    var pos = template.indexOf(WILDCARD),\n        parts = template.split(WILDCARD, 2),\n        match = true;\n    if (parts[0]){\n        // If no wildcard present, return simple string comparison\n        if (parts[0] === template){\n            return parts[0] === str;\n        }\n        else {\n            match = match && str.substr(0, parts[0].length) === parts[0];\n        }\n    }\n    if (parts[1]){\n        match = match && str.substr(-1*parts[1].length) === parts[1];\n    }\n    return match;\n};\n\n/**\n * Private Function\n * Inspect input value and determine whether it is an Object or not.\n * Values of undefined and null will return \"false\", otherwise\n * must be of type \"object\" or \"function\".\n * @param  {Object}  val Thing to examine, may be of any type\n * @return {Boolean}     True if thing is of type \"object\" or \"function\"\n */\nvar isObject = function(val) {\n    if (typeof val === 'undefined' || val === null) { return false;}\n    return ( (typeof val === 'function') || (typeof val === 'object') );\n};\n\n/*\n *  Scan input string from left to right, one character at a time. If a special character\n *  is found (one of \"separators\" or \"containers\"), either store the accumulated word as\n *  a token or else begin watching input for end of token (finding a closing character for\n *  a container or the end of a collection). If a con\n tainer is found, call tokenize\n\n *  recursively on string within container.\n */\n\n/**\n * Private Function\n * Scan input string from left to right, one character at a time. If a special character\n * is found (one of \"separators\", \"containers\", or \"prefixes\"), either store the accumulated\n * word as a token or else begin watching input for end of token (finding a closing character\n * for a container or the end of a collection). If a container is found, capture the substring\n * within the container and recursively call `tokenize` on that substring. Final output will\n * be an array of tokens. A complex token (not a simple property or index) will be represented\n * as an object carrying metadata for processing.\n * @param  {String} str Path string\n * @return {Array}     Array of tokens found in the input path\n */\nvar tokenize = function (str){\n    var path = '',\n        tokens = [],\n        recur = [],\n        mods = {},\n        pathLength = 0,\n        word = '',\n        hasWildcard = false,\n        subpath = '',\n        i = 0,\n        opener = '',\n        closer = '',\n        separator = '',\n        collection = [],\n        depth = 0,\n        escaped = 0;\n\n    if (useCache && cache[str] !== UNDEF){ return cache[str]; }\n\n    // Strip out any unnecessary escaping to simplify processing below\n    path = str.replace(escapedNonSpecialsRegEx, '$&'.substr(1));\n    pathLength = path.length;\n\n    for (i = 0; i < pathLength; i++){\n        // Skip escape character (`\\`) and set \"escaped\" to the index value\n        // of the character to be treated as a literal\n        if (!escaped && path[i] === '\\\\'){\n            // Next character is the escaped character\n            escaped = i+1;\n            i++;\n        }\n        // If a wildcard character is found, mark this token as having a wildcard\n        if (path[i] === WILDCARD) {\n            hasWildcard = true;\n        }\n        // If we have already processed a container opener, treat this subpath specially\n        if (depth > 0){\n            // Is this character another opener from the same container? If so, add to\n            // the depth level so we can match the closers correctly. (Except for quotes\n            // which cannot be nested)\n            // Is this character the closer? If so, back out one level of depth.\n            // Be careful: quote container uses same character for opener and closer.\n            !escaped && path[i] === opener && opener !== closer.closer && depth++;\n            !escaped && path[i] === closer.closer && depth--;\n\n            // While still inside the container, just add to the subpath\n            if (depth > 0){\n                subpath += path[i];\n            }\n            // When we close off the container, time to process the subpath and add results to our tokens\n            else {\n                // Handle subpath \"[bar]\" in foo.[bar],[baz] - we must process subpath and create a new collection\n                if (i+1 < pathLength && separators[path[i+1]] && separators[path[i+1]].exec === 'collection'){\n                    recur = tokenize(subpath);\n                    if (recur === UNDEF){ return undefined; }\n                    collection.push({'t':recur, 'exec': closer.exec});\n                }\n                // Handle subpath \"[baz]\" in foo.[bar],[baz] - we must process subpath and add to collection\n                else if (collection[0]){\n                    recur = tokenize(subpath);\n                    if (recur === UNDEF){ return undefined; }\n                    collection.push({'t':recur, 'exec': closer.exec});\n                    tokens.push(collection);\n                    collection = [];\n                }\n                // Simple property container is equivalent to dot-separated token. Just add this token to tokens.\n                else if (closer.exec === 'property'){\n                    recur = tokenize(subpath);\n                    if (recur === UNDEF){ return undefined; }\n                    tokens = tokens.concat(recur);\n                }\n                // Quoted subpath is all taken literally without token evaluation. Just add subpath to tokens as-is.\n                else if (closer.exec === 'quote'){\n                    tokens.push(subpath);\n                }\n                // Otherwise, create token object to hold tokenized subpath, add to tokens.\n                else {\n                    recur = tokenize(subpath);\n                    if (recur === UNDEF){ return undefined; }\n                    tokens.push({'t':recur, 'exec': closer.exec});\n                }\n                subpath = ''; // reset subpath\n            }\n        }\n        // If a prefix character is found, store it in `mods` for later reference.\n        // Must keep count due to `parent` prefix that can be used multiple times in one token.\n        else if (!escaped && path[i] in prefixes && prefixes[path[i]].exec){\n            mods.has = true;\n            if (mods[prefixes[path[i]].exec]) { mods[prefixes[path[i]].exec]++; }\n            else { mods[prefixes[path[i]].exec] = 1; }\n        }\n        // If a separator is found, time to store the token we've been accumulating. If\n        // this token had a prefix, we store the token as an object with modifier data.\n        // If the separator is the collection separator, we must either create or add\n        // to a collection for this token. For simple separator, we either add the token\n        // to the token list or else add to the existing collection if it exists.\n        else if (!escaped && separators.hasOwnProperty(path[i]) && separators[path[i]].exec){\n            separator = separators[path[i]];\n            if (!word && (mods.has || hasWildcard)){\n                // found a separator, after seeing prefixes, but no token word -> invalid\n                return undefined;\n            }\n            // This token will require special interpreter processing due to prefix or wildcard.\n            if (word && (mods.has || hasWildcard)){\n                word = {'w': word, 'mods': mods};\n                mods = {};\n            }\n            // word is a plain property or end of collection\n            if (separator.exec === 'property'){\n                // we are gathering a collection, so add last word to collection and then store\n                if (collection[0] !== UNDEF){\n                    word && collection.push(word);\n                    tokens.push(collection);\n                    collection = []; // reset\n                }\n                // word is a plain property\n                else {\n                    word && tokens.push(word);\n                }\n            }\n            // word is a collection\n            else if (separator.exec === 'collection'){\n                word && collection.push(word);\n            }\n            word = ''; // reset\n            hasWildcard = false; // reset\n        }\n        // Found a container opening character. A container opening is equivalent to\n        // finding a separator, so \"foo.bar\" is equivalent to \"foo[bar]\", so apply similar\n        // process as separator above with respect to token we have accumulated so far.\n        // Except in case collections - path may have a collection of containers, so\n        // in \"foo[bar],[baz]\", the \"[bar]\" marks the end of token \"foo\", but \"[baz]\" is\n        // merely another entry in the collection, so we don't close off the collection token\n        // yet.\n        // Set depth value for further processing.\n        else if (!escaped && containers.hasOwnProperty(path[i]) && containers[path[i]].exec){\n            closer = containers[path[i]];\n            if (word && (mods.has || hasWildcard)){\n                word = {'w': word, 'mods': mods};\n                mods = {};\n            }\n            if (collection[0] !== UNDEF){\n                // we are gathering a collection, so add last word to collection and then store\n                word && collection.push(word);\n            }\n            else {\n                // word is a plain property\n                word && tokens.push(word);\n            }\n            word = '';\n            hasWildcard = false;\n            opener = path[i];\n            depth++;\n        }\n        // Otherwise, this is just another character to add to the current token\n        else if (i < pathLength) {\n            word += path[i];\n        }\n\n        // If current path index matches the escape index value, reset `escaped`\n        if (i < pathLength && i === escaped){\n            escaped = 0;\n        }\n    }\n\n    // Path ended in an escape character\n    if (escaped){\n        return undefined;\n    }\n\n    // Add trailing word to tokens, if present\n    if (word && (mods.has || hasWildcard)){\n        word = {'w': word, 'mods': mods};\n        mods = {};\n    }\n    // We are gathering a collection, so add last word to collection and then store\n    if (collection[0] !== UNDEF){\n        word && collection.push(word);\n        tokens.push(collection);\n    }\n    // Word is a plain property\n    else {\n        word && tokens.push(word);\n    }\n\n    // depth != 0 means mismatched containers\n    if (depth !== 0){ return undefined; }\n\n    // If path was valid, cache the result\n    useCache && (cache[str] = tokens);\n\n    return tokens;\n};\n\nvar resolvePath = function (obj, path, newValue, args, valueStack){\n    var change = newValue !== UNDEF,\n        tk = [],\n        tkLength = 0,\n        tkLastIdx = 0,\n        valueStackLength = 1,\n        i = 0,\n        prev = obj,\n        curr = '',\n        currLength = 0,\n        wordCopy = '',\n        contextProp,\n        idx = 0,\n        context = obj,\n        ret,\n        newValueHere = false,\n        placeInt = 0,\n        prop = '',\n        callArgs;\n\n    if (typeof path === 'string' && !simplePathRegEx.test(path)){\n        tk = path.split(propertySeparator);\n        tkLength = tk.length;\n        while (prev !== UNDEF && i < tkLength){\n            if (tk[i] === ''){ return undefined; }\n            else if (change){\n                if (i === tkLength - 1){\n                    prev[tk[i]] = newValue;\n                }\n                // For arrays, test current context against undefined to avoid parsing this segment as a number.\n                // For anything else, use hasOwnProperty.\n                else if (force && (prev.constructor === Array ? prev[tk[i]] !== UNDEF : !prev.hasOwnProperty(tk[i]))) {\n                    prev[tk[i]] = {};\n                }\n            }\n            prev = prev[tk[i]];\n            i++;\n        }\n        return prev;\n    }\n\n\n    // Either a full token set was provided or else the path includes\n    // some special characters and must be evaluated more carefully.\n    // tk = typeof path === 'string' ? tokenize(path) : path.t ? path.t : [path];\n    if (typeof path === 'string'){\n        if (useCache && cache[path]) { tk = cache[path]; }\n        else {\n            tk = tokenize(path);\n            if (tk === UNDEF){ return undefined; }\n        }\n    }\n    else {\n        tk = path.t ? path.t : [path];\n    }\n\n    tkLength = tk.length;\n    if (tkLength === 0) { return undefined; }\n    tkLastIdx = tkLength - 1;\n\n    // if (typeof valueStack === 'undefined'){\n    if (valueStack){\n        valueStackLength = valueStack.length;\n    }\n    else {\n        valueStack = [obj]; // Initialize valueStack with original data object; length already init to 1\n    }\n\n    // Converted Array.reduce into while loop, still using \"prev\", \"curr\", \"idx\"\n    // as loop values\n    while (prev !== UNDEF && idx < tkLength){\n        curr = tk[idx];\n        newValueHere = (change && (idx === tkLastIdx));\n\n        // Handle most common simple path scenario first\n        if (typeof curr === 'string'){\n            if (change){\n                if (newValueHere){\n                    context[curr] = newValue;\n                    if (context[curr] !== newValue){ return undefined; } // new value failed to set\n                }\n                else if (force && (prev.constructor === Array ? context[curr] !== UNDEF : !context.hasOwnProperty(curr))) {\n                    context[curr] = {};\n                }\n            }\n            ret = context[curr];\n        }\n        else {\n            if (curr === UNDEF){\n                ret = undefined;\n            }\n            else if (curr.constructor === Array){\n                // call resolvePath again with base value as evaluated value so far and\n                // each element of array as the path. Concat all the results together.\n                ret = [];\n                currLength = curr.length\n                for (i = 0; i < currLength; i++){\n                    contextProp = resolvePath(context, curr[i], newValue, args, valueStack.slice());\n                    if (contextProp === UNDEF) { return undefined; }\n\n                    if (newValueHere){\n                        if (curr[i].t && curr[i].exec === 'evalProperty'){\n                            context[contextProp] = newValue;\n                        } else {\n                            ret = ret.concat(contextProp);\n                        }\n                    }\n                    else {\n                        if (curr[i].t && curr[i].exec === 'evalProperty'){\n                            ret = ret.concat(context[contextProp]);\n                        } else {\n                            ret = ret.concat(contextProp);\n                        }\n                    }\n                }\n            }\n            else if (curr.w){\n                wordCopy = curr.w + '';\n                // this word token has modifiers, modify current context\n                if (curr.mods.parent){\n                    context = valueStack[valueStackLength - 1 - curr.mods.parent];\n                    if (context === UNDEF) { return undefined; }\n                }\n                if (curr.mods.root){\n                    // Reset context and valueStack, start over at root in this context\n                    context = valueStack[0];\n                    valueStack = [context];\n                    valueStackLength = 1;\n                }\n                if (curr.mods.placeholder){\n                    placeInt = wordCopy - 1;\n                    if (args[placeInt] === UNDEF){ return undefined; }\n                    // Force args[placeInt] to String, won't atwordCopyt to process\n                    // arg of type function, array, or plain object\n                    wordCopy = args[placeInt].toString();\n                }\n                \n                // \"context\" modifier (\"@\" by default) replaces current context with a value from\n                // the arguments.\n                if (curr.mods.context){\n                    placeInt = wordCopy - 1;\n                    if (args[placeInt] === UNDEF){ return undefined; }\n                    // Force args[placeInt] to String, won't atwordCopyt to process\n                    // arg of type function, array, or plain object\n                    ret = args[placeInt];\n                }\n                else {\n                    // Repeat basic string property processing with word and modified context\n                    if (context[wordCopy] !== UNDEF) {\n                        if (newValueHere){ context[wordCopy] = newValue; }\n                        ret = context[wordCopy];\n                    }\n                    else if (typeof context === 'function'){\n                        ret = wordCopy;\n                    }\n                    else if (wildcardRegEx.test(wordCopy) >-1){\n                        ret = [];\n                        for (prop in context){\n                            if (context.hasOwnProperty(prop) && wildCardMatch(wordCopy, prop)){\n                                if (newValueHere){ context[prop] = newValue; }\n                                ret.push(context[prop]);\n                            }\n                        }\n                    }\n                    else { return undefined; }\n                }\n            }\n            else if (curr.exec === 'evalProperty'){\n                if (newValueHere){\n                    context[resolvePath(context, curr, UNDEF, args, valueStack.slice())] = newValue;\n                }\n                ret = context[resolvePath(context, curr, UNDEF, args, valueStack.slice())];\n            }\n            else if (curr.exec === 'call'){\n                // If function call has arguments, process those arguments as a new path\n                if (curr.t && curr.t.length){\n                    callArgs = resolvePath(context, curr, UNDEF, args);\n                    if (callArgs === UNDEF){\n                        ret = context.apply(valueStack[valueStackLength - 2]);\n                    }\n                    else if (Array.isArray(callArgs)){\n                        ret = context.apply(valueStack[valueStackLength - 2], callArgs);\n                    }\n                    else {\n                        ret = context.call(valueStack[valueStackLength - 2], callArgs);\n                    }\n                }\n                else {\n                    ret = context.call(valueStack[valueStackLength - 2]);\n                }\n            }\n        }\n        valueStack.push(ret);\n        valueStackLength++;\n        context = ret;\n        prev = ret;\n        idx++;\n    }\n    return context;\n};\n\nvar scanForValue = function(obj, val, savePath, path){\n    var i, len, prop, more;\n\n    path = path ? path : '';\n\n    if (obj === val){\n        return savePath(path); // true -> keep looking; false -> stop now\n    }\n    else if (Array.isArray(obj)){\n        len = obj.length;\n        for(i = 0; i < len; i++){\n            more = scanForValue(obj[i], val, savePath, path + '.' + i);\n            if (!more){ return; }\n        }\n        return true; // keep looking\n    }\n    else if (isObject(obj)) {\n        for (prop in obj){\n            if (obj.hasOwnProperty(prop)){\n                more = scanForValue(obj[prop], val, savePath, path + '.' + prop);\n                if (!more){ return; }\n            }\n        }\n        return true; // keep looking\n    }\n    // Leaf node (string, number, character, boolean, etc.), but didn't match\n    return true; // keep looking\n};\n\nexport var getTokens = function(path){\n    var tokens = tokenize(path);\n    if (typeof tokens === 'undefined'){ return undefined; }\n    return {t: tokens};\n};\n\nexport var isValid = function(path){\n    return typeof tokenize(path) !== 'undefined';\n};\n\nexport var escape = function(path){\n    return path.replace(allSpecialsRegEx, '\\\\$&');\n};\n\nexport var get = function (obj, path){\n    var i = 0,\n        len = arguments.length,\n        args = len > 2 ? new Array(len - 2) : [];\n    if (len > 2){\n        for (i = 2; i < len; i++) { args[i-2] = arguments[i]; }\n    }\n    return resolvePath(obj, path, undefined, args);\n};\n\nexport var set = function(obj, path, val){\n    var i = 0,\n        len = arguments.length,\n        args = len > 3 ? new Array(len - 3) : [],\n        ref;\n    if (len > 3){\n        for (i = 3; i < len; i++) { args[i-3] = arguments[i]; }\n    }\n    ref = resolvePath(obj, path, val, args);\n    if (Array.isArray(ref)){\n        return ref.indexOf(undefined) === -1;\n    }\n    return ref !== UNDEF;\n};\n\nexport var find = function(obj, val, oneOrMany){\n    var retVal = [];\n    var savePath = function(path){\n        retVal.push(path.substr(1));\n        if(!oneOrMany || oneOrMany === 'one'){\n            retVal = retVal[0];\n            return false;\n        }\n        return true;\n    };\n    scanForValue(obj, val, savePath);\n    return retVal[0] ? retVal : undefined;\n};\n\nexport var setOptions = function(options){\n    if (options.prefixes){\n        for (var p in options.prefixes){\n            if (options.prefixes.hasOwnProperty(p)){\n                prefixes[p] = options.prefixes[p];\n            }\n        }\n        prefixList = Object.keys(prefixes);\n    }\n    if (options.separators){\n        for (var s in options.separators){\n            if (options.separators.hasOwnProperty(s)){\n                separators[s] = options.separators[s];\n                if (separators[s].exec === 'property'){\n                    propertySeparator = s;\n                }\n            }\n        }\n        separatorList = Object.keys(separators);\n    }\n    if (options.containers){\n        for (var c in options.containers){\n            if (options.containers.hasOwnProperty(c)){\n                containers[c] = options.containers[c];\n            }\n        }\n        containerList = Object.keys(containers);\n    }\n    if (typeof options.cache !== 'undefined'){\n        useCache = !!options.cache;\n    }\n    if (typeof options.advanced !== 'undefined'){\n        advanced = !!options.advanced;\n    }\n    if (typeof options.force !== 'undefined'){\n        force = !!options.force;\n    }\n    // Reset all special character sets and regular expressions\n    simplePathChars = ('[\\\\\\\\' + [WILDCARD].concat(prefixList).concat(separatorList).concat(containerList).join('\\\\') + ']').replace('\\\\'+propertySeparator, '');\n    simplePathRegEx = new RegExp(simplePathChars);\n    allSpecials = '[\\\\\\\\\\\\' + [WILDCARD].concat(prefixList).concat(separatorList).concat(containerList).concat(containerCloseList).join('\\\\') + ']';\n    allSpecialsRegEx = new RegExp(allSpecials, 'g');\n    escapedSpecialsRegEx = new RegExp('\\\\'+allSpecials, 'g');\n};\n"],"names":[],"mappings":"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","sourceRoot":"/source/"}