{"version":3,"file":"lexer-umd.js","sources":["null.js","uuid.js","lexer/token.js","lexer.js"],"sourcesContent":["'use strict';\n\n/**\n * A \"clean\", empty container. Instantiating this is faster than explicitly calling `Object.create( null )`.\n * @class Null\n * @extends external:null\n */\nexport default function Null(){}\nNull.prototype = Object.create( null );\nNull.prototype.constructor =  Null;","'use strict';\n\nlet id = 0;\n\nexport default function nextId(){\n    return ++id;\n}","'use strict';\n\nimport Null from '../null';\nimport nextId from '../uuid';\n\n/**\n * @class Token\n * @extends Null\n * @param {external:string} type The type of the token\n * @param {*} value The value of the token\n * @throws {external:TypeError} If `type` is not a string\n * @throws {external:TypeError} If `value` is undefined.\n */\nfunction Token( type, value ){\n    if( typeof type !== 'string' ){\n        throw new TypeError( 'type must be a string' );\n    }\n    \n    if( typeof value === 'undefined' ){\n        throw new TypeError( 'value cannot be undefined' );\n    }\n    \n    this.id = nextId();\n    this.type = type;\n    this.value = value;\n    this.length = value.length;\n}\n\nToken.prototype = new Null();\n\nToken.prototype.constructor = Token;\n\nToken.prototype.equals = function( token ){\n    return token instanceof Token && this.valueOf() === token.valueOf();\n};\n\n/**\n * @function\n * @param {external:string} type\n * @returns {external:boolean} Whether or not the token is the `type` provided.\n */\nToken.prototype.is = function( type ){\n    return this.type === type;\n};\n\nToken.prototype.toJSON = function(){\n    var json = new Null();\n    \n    json.type = this.type;\n    json.value = this.value;\n    \n    return json;\n};\n\nToken.prototype.toString = function(){\n    return String( this.value );\n};\n\nToken.prototype.valueOf = function(){\n    return this.id;\n};\n\nexport { Token as default };\n\nexport function Identifier( value ){\n    Token.call( this, 'identifier', value );\n}\n\nIdentifier.prototype = Object.create( Token.prototype );\n\nIdentifier.prototype.constructor = Identifier;\n\nexport function Literal( value ){\n    Token.call( this, 'literal', value );\n}\n\nLiteral.prototype = Object.create( Token.prototype );\n\nLiteral.prototype.constructor = Literal;\n\nexport function Punctuator( value ){\n    Token.call( this, 'punctuator', value );\n}\n\nPunctuator.prototype = Object.create( Token.prototype );\n\nPunctuator.prototype.constructor = Punctuator;","'use strict';\n\nimport Null from './null';\nimport { Identifier, Literal, Punctuator } from './lexer/token';\n\n/**\n * @class LexerError\n * @extends SyntaxError\n * @param {external:string} message The error message\n */\nfunction LexerError( message ){\n    SyntaxError.call( this, message );    \n}\n\nLexerError.prototype = Object.create( SyntaxError.prototype );\n\n/**\n * @class Lexer\n * @extends Null\n */\nexport default function Lexer(){\n    this.buffer = '';\n}\n\nLexer.prototype = new Null();\n\nLexer.prototype.constructor = Lexer;\n\nLexer.prototype.lex = function( text ){\n    this.buffer = text;\n    this.index = 0;\n    this.tokens = [];\n    \n    const length = this.buffer.length;\n    let word = '',\n        char;\n    \n    while( this.index < length ){\n        char = this.buffer[ this.index ];\n        \n        // Identifier\n        if( this.isIdentifier( char ) ){\n            word = this.read( function( char ){\n                return !this.isIdentifier( char ) && !this.isNumeric( char );\n            } );\n            \n            this.tokens.push( new Identifier( word ) );\n        \n        // Punctuator\n        } else if( this.isPunctuator( char ) ){\n            this.tokens.push( new Punctuator( char ) );\n            this.index++;\n        \n        // Quoted String\n        } else if( this.isQuote( char ) ){\n            let quote = char;\n            \n            this.index++;\n            \n            word = this.read( function( char ){\n                return char === quote;\n            } );\n            \n            this.tokens.push( new Literal( `${ quote }${ word }${ quote }` ) );\n            \n            this.index++;\n        \n        // Numeric\n        } else if( this.isNumeric( char ) ){\n            word = this.read( function( char ){\n                return !this.isNumeric( char );\n            } );\n            \n            this.tokens.push( new Literal( word ) );\n        \n        // Whitespace\n        } else if( this.isWhitespace( char ) ){\n            this.index++;\n        \n        // Error\n        } else {\n            this.throwError( `\"${ char }\" is an invalid character` );\n        }\n        \n        word = '';\n    }\n    \n    return this.tokens;\n};\n\nLexer.prototype.isIdentifier = function( char ){\n    return 'a' <= char && char <= 'z' || 'A' <= char && char <= 'Z' || '_' === char || char === '$';\n};\n\nLexer.prototype.isPunctuator = function( char ){\n    return char === '.' || char === '(' || char === ')' || char === '[' || char === ']' || char === ',' || char === '%';\n};\n\nLexer.prototype.isWhitespace = function( char ){\n    return char === ' ' || char === '\\r' || char === '\\t' || char === '\\n' || char === '\\v' || char === '\\u00A0';\n};\n\nLexer.prototype.isQuote = function( char ){\n    return char === '\"' || char === \"'\";\n};\n\nLexer.prototype.isNumeric = function( char ){\n    return '0' <= char && char <= '9';\n};\n\nLexer.prototype.read = function( until ){\n    let start = this.index,\n        char;\n    \n    while( this.index < this.buffer.length ){\n        char = this.buffer[ this.index ];\n        \n        if( until.call( this, char ) ){\n            break;\n        }\n        \n        this.index++;\n    }\n    \n    return this.buffer.slice( start, this.index );\n};\n\nLexer.prototype.throwError = function( message ){\n    throw new LexerError( message );\n};\n\nLexer.prototype.toJSON = function(){\n    const json = new Null();\n    \n    json.buffer = this.buffer;\n    json.tokens = this.tokens.map( function( token ){\n        return token.toJSON();\n    } );\n    \n    return json;\n};\n"],"names":[],"mappings":";;;;;;AAEA;;;;;AAKA,AAAe,SAAS,IAAI,EAAE,EAAE;AAChC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC;AACvC,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,IAAI;;ACPlC,IAAI,EAAE,GAAG,CAAC,CAAC;;AAEX,AAAe,SAAS,MAAM,EAAE;IAC5B,OAAO,EAAE,EAAE,CAAC;;;ACAhB;;;;;;;;AAQA,SAAS,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;IACzB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC1B,MAAM,IAAI,SAAS,EAAE,uBAAuB,EAAE,CAAC;KAClD;;IAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;QAC9B,MAAM,IAAI,SAAS,EAAE,2BAA2B,EAAE,CAAC;KACtD;;IAED,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC;IACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;CAC9B;;AAED,KAAK,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;;AAE7B,KAAK,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;;AAEpC,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE;IACtC,OAAO,KAAK,YAAY,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC;CACvE,CAAC;;;;;;;AAOF,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,UAAU,IAAI,EAAE;IACjC,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;CAC7B,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU;IAC/B,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;;IAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;;IAExB,OAAO,IAAI,CAAC;CACf,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU;IACjC,OAAO,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;CAC/B,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU;IAChC,OAAO,IAAI,CAAC,EAAE,CAAC;CAClB,CAAC;;AAEF,AAEA,AAAO,SAAS,UAAU,EAAE,KAAK,EAAE;IAC/B,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;CAC3C;;AAED,UAAU,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC;;AAExD,UAAU,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,CAAC;;AAE9C,AAAO,SAAS,OAAO,EAAE,KAAK,EAAE;IAC5B,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;CACxC;;AAED,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC;;AAErD,OAAO,CAAC,SAAS,CAAC,WAAW,GAAG,OAAO,CAAC;;AAExC,AAAO,SAAS,UAAU,EAAE,KAAK,EAAE;IAC/B,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;CAC3C;;AAED,UAAU,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC;;AAExD,UAAU,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU;;ACjF7C;;;;;AAKA,SAAS,UAAU,EAAE,OAAO,EAAE;IAC1B,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;CACrC;;AAED,UAAU,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,SAAS,EAAE,CAAC;;;;;;AAM9D,AAAe,SAAS,KAAK,EAAE;IAC3B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;CACpB;;AAED,KAAK,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;;AAE7B,KAAK,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;;AAEpC,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,IAAI,EAAE;IAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;IAEjB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAClC,IAAI,IAAI,GAAG,EAAE;QACT,IAAI,CAAC;;IAET,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,EAAE;QACxB,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;;;QAGjC,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,EAAE;YAC3B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE;gBAC9B,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC;aAChE,EAAE,CAAC;;YAEJ,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC;;;SAG9C,MAAM,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC;YAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;;;SAGhB,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;YAC7B,IAAI,KAAK,GAAG,IAAI,CAAC;;YAEjB,IAAI,CAAC,KAAK,EAAE,CAAC;;YAEb,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE;gBAC9B,OAAO,IAAI,KAAK,KAAK,CAAC;aACzB,EAAE,CAAC;;YAEJ,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,OAAO,EAAE,CAAC,GAAG,KAAK,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;;YAEnE,IAAI,CAAC,KAAK,EAAE,CAAC;;;SAGhB,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE;YAC/B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE;gBAC9B,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC;aAClC,EAAE,CAAC;;YAEJ,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC;;;SAG3C,MAAM,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC,KAAK,EAAE,CAAC;;;SAGhB,MAAM;YACH,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE,yBAAyB,CAAC,EAAE,CAAC;SAC5D;;QAED,IAAI,GAAG,EAAE,CAAC;KACb;;IAED,OAAO,IAAI,CAAC,MAAM,CAAC;CACtB,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,IAAI,EAAE;IAC3C,OAAO,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC;CACnG,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,IAAI,EAAE;IAC3C,OAAO,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,CAAC;CACvH,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,IAAI,EAAE;IAC3C,OAAO,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,QAAQ,CAAC;CAChH,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE;IACtC,OAAO,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,CAAC;CACvC,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,IAAI,EAAE;IACxC,OAAO,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,CAAC;CACrC,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE;IACpC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK;QAClB,IAAI,CAAC;;IAET,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QACpC,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;;QAEjC,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;YAC1B,MAAM;SACT;;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;KAChB;;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;CACjD,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,UAAU,GAAG,UAAU,OAAO,EAAE;IAC5C,MAAM,IAAI,UAAU,EAAE,OAAO,EAAE,CAAC;CACnC,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU;IAC/B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;;IAExB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,KAAK,EAAE;QAC5C,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC;KACzB,EAAE,CAAC;;IAEJ,OAAO,IAAI,CAAC;CACf,CAAC,;;,;;","sourceRoot":"/source/"}