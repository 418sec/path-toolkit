{"version":3,"file":"interpreter-umd.js","sources":["forEach.js","hasOwnProperty.js","null.js","builder/syntax.js","interpreter.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {external:Function} ForEachCallback\n * @param {*} item\n * @param {external:number} index\n */\n\n/**\n * @function\n * @param {Array-Like} list\n * @param {ForEachCallback} callback\n */\nfunction forEach( list, callback ){\n    let index = 0,\n        length = list.length,\n        item;\n    \n    for( ; index < length; index++ ){\n        item = list[ index ];\n        callback( item, index );\n    }\n}\n\nexport { forEach as default };","'use strict';\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * @function\n * @param {*} object\n * @param {external:string} property\n */\nfunction hasOwnProperty( object, property ){\n    return _hasOwnProperty.call( object, property );\n}\n\nexport { hasOwnProperty as default };","'use strict';\n\n/**\n * A \"clean\", empty container. Instantiating this is faster than explicitly calling `Object.create( null )`.\n * @class Null\n * @extends external:null\n */\nfunction Null(){}\nNull.prototype = Object.create( null );\nNull.prototype.constructor =  Null;\n\nexport { Null as default };","'use strict';\n\nimport Null from '../null';\n\nvar Syntax = new Null();\n\nSyntax.ArrayExpression      = 'ArrayExpression';\nSyntax.CallExpression       = 'CallExpression';\nSyntax.ExpressionStatement  = 'ExpressionStatement';\nSyntax.Identifier           = 'Identifier';\nSyntax.Literal              = 'Literal';\nSyntax.MemberExpression     = 'MemberExpression';\nSyntax.Program              = 'Program';\nSyntax.SequenceExpression   = 'SequenceExpression';\n\nexport { Syntax as default };","'use strict';\n\nimport forEach from './forEach';\nimport hasOwnProperty from './hasOwnProperty';\nimport Null from './null';\nimport Syntax from './builder/syntax';\n\nvar noop = function(){};\n\nfunction getValue( base, name, create, defaultValue ){\n    if( create && !( hasOwnProperty( base, name ) ) ){\n        base[ name ] = defaultValue;\n    }\n    return base[ name ];\n}\n\n/**\n * @function Interpreter~intepretList\n * @param {Interpreter} interpreter\n * @param {Array-Like} list\n * @param {external:boolean} context\n * @param {external:boolean} create\n * @returns {Array<external:Function>} The interpreted list\n */\nfunction intepretList( interpreter, list, context, create ){\n    var result = [];\n    forEach( list, function( expression, index ){\n        result[ index ] = interpreter.recurse( expression, context, create );\n    } );\n    return result;\n}\n\n/**\n * @class Interpreter\n * @extends Null\n * @param {Builder} builder\n */\nfunction Interpreter( builder ){\n    if( !arguments.length ){\n        throw new TypeError( 'builder cannot be undefined' );\n    }\n    \n    /**\n     * @member {Builder} Interpreter#builder\n     */\n    this.builder = builder;\n}\n\nInterpreter.prototype = new Null();\n\nInterpreter.prototype.constructor = Interpreter;\n\n/**\n * @function\n * @param {external:string} expression\n */\nInterpreter.prototype.compile = function( expression, create ){\n    var program = this.builder.build( expression ),\n        body = program.body,\n        interpreter = this,\n        expressions, fn;\n    \n    if( typeof create !== 'boolean' ){\n        create = false;\n    }\n    \n    /**\n     * @member {external:string}\n     */\n    interpreter.expression = this.builder.text;\n    \n    //console.log( '-------------------------------------------------' );\n    //console.log( 'Interpreting ', expression );\n    //console.log( '-------------------------------------------------' );\n    \n    //console.log( 'Program', program.range );\n    interpreter.eol = program.range[ 1 ];\n    \n    switch( body.length ){\n        case 0:\n            fn = noop;\n            break;\n        case 1:\n            fn = interpreter.recurse( body[ 0 ].expression, false, create );\n            break;\n        default:\n            expressions = [];\n            forEach( body, function( expressionStatement, index ){\n                expressions[ index ] = interpreter.recurse( expressionStatement.expression, false, create );\n            } );\n            fn = function( base, value ){\n                var lastValue;\n                \n                forEach( expressions, function( expression ){\n                    lastValue = expression( base, value );\n                } );\n                \n                return lastValue;\n            };\n            break;\n    }\n    \n    return fn;\n};\n\nInterpreter.prototype.recurse = function( node, context, create ){\n    var interpreter = this,\n        isRightMost = false,\n        \n        args, fn, left, right;\n    \n    //console.log( 'Recursing on', node.type );\n    \n    switch( node.type ){\n        \n        case Syntax.ArrayExpression: {\n            args = intepretList( interpreter, node.elements, false );\n            isRightMost = node.range[ 1 ] === interpreter.eol;\n            \n            return function getArrayExpression( base, value ){\n                //console.log( 'Getting ARRAY EXPRESSION' );\n                var result = [], name;\n                forEach( args, function( arg, index ){\n                    name = arg( base, value );\n                    result[ index ] = getValue( base, name, create, isRightMost ? value : {} );\n                } );\n                //console.log( '- ARRAY EXPRESSION RESULT', result );\n                return context ?\n                    { value: result } :\n                    result;\n            };\n        }\n        \n        case Syntax.CallExpression: {\n            args = intepretList( interpreter, node.arguments, false );\n            right = interpreter.recurse( node.callee, true, create );\n            \n            return function getCallExpression( base, value ){\n                //console.log( 'Getting CALL EXPRESSION' );\n                //console.log( '- RIGHT', right.name );\n                var values = [],\n                    rhs = right( base, value ),\n                    result;\n                //console.log( '- RHS', rhs );\n                if( typeof rhs.value === 'function' ){\n                    values = [];\n                    \n                    forEach( args, function( arg, index ){\n                        values[ index ] = arg( base );\n                    } );\n                    \n                    result = rhs.value.apply( rhs.context, values );\n                } else if( create && typeof rhs.value === 'undefined' ){\n                    throw new Error( 'cannot create call expressions' );\n                } else {\n                    throw new TypeError( 'call expression must be a function' );\n                }\n                //console.log( '- CALL RESULT', result );\n                return context ?\n                    { value: result }:\n                    result;\n            };\n        }\n        \n        case Syntax.ExpressionStatement: {\n            left = interpreter.recurse( node.expression, context, create );\n            \n            return function getExpressionStatement( base, value ){\n                //console.log( 'Getting EXPRESSION STATEMENT' );\n                //console.log( '- EXPRESSION STATEMENT LEFT', left.name );\n                var result = left( base, value );\n                //console.log( '- EXPRESSION STATEMENT RESULT', result );\n                return result;\n            };\n        }\n        \n        case Syntax.Identifier: {\n            isRightMost = node.range[ 1 ] === interpreter.eol;\n            \n            return function getIdentifier( base, value ){\n                //console.log( 'Getting IDENTIFIER' );\n                var name = node.name,\n                    result;\n                if( typeof base !== 'undefined' ){\n                    if( create && !( hasOwnProperty( base, name ) ) ){\n                        base[ name ] = isRightMost ?\n                            value :\n                            {};\n                    }\n                    result = base[ name ];\n                }\n                //console.log( '- NAME', name );\n                //console.log( '- IDENTIFIER RESULT', result );\n                return context ?\n                    { context: base, name: name, value: result } :\n                    result;\n            };\n        }\n        \n        case Syntax.Literal: {\n            return function getLiteral( base ){\n                var result = node.value;\n                //console.log( 'Getting LITERAL' );\n                //console.log( '- LITERAL RESULT', result );\n                return context ?\n                    { context: undefined, name: undefined, value: result } :\n                    result;\n            };\n        }\n        \n        case Syntax.MemberExpression: {\n            left = interpreter.recurse( node.object, false, create );\n            isRightMost = node.property.range[ 1 ] + 1 === interpreter.eol;\n            \n            // Computed\n            if( node.computed ){\n                right = interpreter.recurse( node.property, false, create );\n                \n                if( node.property.type === Syntax.SequenceExpression ){\n                    fn = function getComputedMember( base, value ){\n                        //console.log( 'Getting COMPUTED MEMBER' );\n                        //console.log( '- COMPUTED LEFT', left.name );\n                        //console.log( '- COMPUTED RIGHT', right.name );\n                        var lhs = left( base, value ),\n                            result = [],\n                            rhs;\n                        //console.log( '- COMPUTED LHS', lhs );\n                        if( typeof lhs !== 'undefined' ){\n                            rhs = right( base, value );\n                            //console.log( '- COMPUTED RHS', rhs );\n                            if( Array.isArray( rhs ) ){\n                                forEach( rhs, function( item, index ){\n                                    result[ index ] = getValue( lhs, item, create, isRightMost ? value : {} );\n                                } );\n                                //console.log( '-- LIST|VALUE:LIST', result );\n                                if( result.length === 1 ){\n                                    result = result[ 0 ];\n                                }\n                            }\n                        }\n                        //console.log( '- COMPUTED RESULT', result );\n                        return context ?\n                            { context: lhs, name: rhs, value: result } :\n                            result;\n                    };\n                } else {\n                    if( node.object.type === Syntax.ArrayExpression ){\n                        fn = function getComputedMember( base, value ){\n                            //console.log( 'Getting COMPUTED MEMBER' );\n                            //console.log( '- COMPUTED LEFT', left.name );\n                            //console.log( '- COMPUTED RIGHT', right.name );\n                            var lhs = left( base, value ),\n                                result = [],\n                                rhs;\n                            //console.log( '- COMPUTED LHS', lhs );\n                            if( Array.isArray( lhs ) ){\n                                rhs = right( base, value );\n                                //console.log( '- COMPUTED RHS', rhs );\n                                if( typeof rhs === 'number' ){\n                                    result[ 0 ] = getValue( lhs, rhs, create, isRightMost ? value : {} );\n                                } else {\n                                    if( lhs.length === 1 ){\n                                        result[ 0 ] = getValue( lhs[ 0 ], rhs, create, isRightMost ? value : {} );\n                                    } else {\n                                        forEach( lhs, function( item, index ){\n                                            result[ index ] = getValue( item, rhs, create, isRightMost ? value : {} );\n                                        } );\n                                    }\n                                }\n                                //console.log( '-- LIST:VALUE', result );\n                                if( result.length === 1 ){\n                                    result = result[ 0 ];\n                                }\n                            }\n                            //console.log( '- COMPUTED RESULT', result );\n                            return context ?\n                                { context: lhs, name: rhs, value: result } :\n                                result;\n                        };\n                    } else {\n                        fn = function getComputedMember( base, value ){\n                            //console.log( 'Getting COMPUTED MEMBER' );\n                            //console.log( '- COMPUTED LEFT', left.name );\n                            //console.log( '- COMPUTED RIGHT', right.name );\n                            var lhs = left( base, value ),\n                                result,\n                                rhs;\n                            //console.log( '- COMPUTED LHS', lhs );\n                            if( typeof lhs !== 'undefined' ){\n                                rhs = right( base, value );\n                                //console.log( '- COMPUTED RHS', rhs );\n                                result = getValue( lhs, rhs, create, isRightMost ? value : {} );\n                                //console.log( '-- VALUE:VALUE', result );\n                            }\n                            //console.log( '- COMPUTED RESULT', result );\n                            return context ?\n                                { context: lhs, name: rhs, value: result } :\n                                result;\n                        };\n                    }\n                }\n                \n            // Non-computed\n            } else {\n                right = node.property.name;\n                isRightMost = node.property.range[ 1 ] === interpreter.eol;\n                fn = function getNonComputedMember( base, value ){\n                    //console.log( 'Getting NON-COMPUTED MEMBER' );\n                    //console.log( '- NON-COMPUTED LEFT', left.name );\n                    //console.log( '- NON-COMPUTED RIGHT', right );\n                    var lhs = left( base, value ),\n                        result;\n                    //console.log( '- NON-COMPUTED LHS', lhs );\n                    if( typeof lhs !== 'undefined' ){\n                        if( !Array.isArray( lhs ) ){\n                            result = getValue( lhs, right, create, isRightMost ? value : {} );\n                            //console.log( '-- VALUE:VALUE', result );\n                        } else {\n                            result = [];\n                            if( lhs.length === 1 ){\n                                result[ 0 ] = getValue( lhs[ 0 ], right, create, isRightMost ? value : {} );\n                            } else {\n                                forEach( lhs, function( item, index ){\n                                    result[ index ] = getValue( item, right, create, isRightMost ? value : {} );\n                                } );\n                            }\n                            //console.log( '-- LIST:VALUE', result );\n                        }\n                    }\n                    //console.log( '- NON-COMPUTED RESULT', result );\n                    return context ?\n                        { context: lhs, name: right, value: result } :\n                        result;\n                };\n            }\n            \n            return fn;\n        }\n        \n        case Syntax.SequenceExpression: {\n            args = intepretList( interpreter, node.expressions, false );\n            \n            return function getSequenceExpression( base, value ){\n                //console.log( 'Getting SEQUENCE EXPRESSION' );\n                var result = [];\n                forEach( args, function( arg, index ){\n                    result[ index ] = arg( base );\n                } );\n                //console.log( '- SEQUENCE RESULT', result );\n                return context ?\n                    { value: result } :\n                    result;\n            };\n        }\n        \n        default:\n            this.throwError( 'Unknown node type ' + node.type );\n    }\n};\n\nInterpreter.prototype.throwError = function( message ){\n    throw new Error( message );\n};\n\nexport { Interpreter as default };"],"names":[],"mappings":"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","sourceRoot":"/source/"}