{"version":3,"file":"interpreter-umd.js","sources":["forEach.js","null.js","interpreter.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {external:Function} ForEachCallback\n * @param {*} item\n * @param {external:number} index\n */\n\n/**\n * @function\n * @param {Array-Like} list\n * @param {ForEachCallback} callback\n */\nfunction forEach( list, callback ){\n    let index = 0,\n        length = list.length,\n        item;\n    \n    for( ; index < length; index++ ){\n        item = list[ index ];\n        callback( item, index );\n    }\n}\n\nexport { forEach as default };","'use strict';\n\n/**\n * A \"clean\", empty container. Instantiating this is faster than explicitly calling `Object.create( null )`.\n * @class Null\n * @extends external:null\n */\nfunction Null(){}\nNull.prototype = Object.create( null );\nNull.prototype.constructor =  Null;\n\nexport { Null as default };","'use strict';\n\nimport forEach from './forEach';\nimport Null from './null';\n\nvar noop = function(){};\n\n/**\n * @function Interpreter~intepretList\n * @param {Interpreter} interpreter\n * @param {Array-Like} list\n * @param {external:boolean} context\n * @param {external:boolean} create\n * @returns {Array<external:Function>} The interpreted list\n */\nfunction intepretList( interpreter, list, context, create ){\n    var result = [];\n    forEach( list, function( expression, index ){\n        result[ index ] = interpreter.recurse( expression, context, create );\n    } );\n    return result;\n}\n\n/**\n * @class Interpreter\n * @extends Null\n * @param {Builder} builder\n */\nfunction Interpreter( builder ){\n    if( !arguments.length ){\n        throw new TypeError( 'builder cannot be undefined' );\n    }\n    \n    /**\n     * @member {Builder} Interpreter#builder\n     */\n    this.builder = builder;\n}\n\nInterpreter.prototype = new Null();\n\nInterpreter.prototype.constructor = Interpreter;\n\n/**\n * @function\n * @param {external:string} expression\n */\nInterpreter.prototype.compile = function( expression, create ){\n    var program = this.builder.build( expression ),\n        body = program.body,\n        interpreter = this,\n        expressions, fn;\n    \n    if( typeof create !== 'boolean' ){\n        create = false;\n    }\n    \n    /**\n     * @member {external:string}\n     */\n    interpreter.expression = expression;\n    \n    //console.log( '-------------------------------------------------' );\n    //console.log( 'Interpreting ', expression );\n    //console.log( '-------------------------------------------------' );\n    \n    //console.log( 'Program', program.range );\n    interpreter.eol = program.range[ 1 ];\n    \n    switch( body.length ){\n        case 0:\n            fn = noop;\n            break;\n        case 1:\n            fn = interpreter.recurse( body[ 0 ].expression, false, create );\n            break;\n        default:\n            expressions = [];\n            forEach( body, function( expressionStatement, index ){\n                expressions[ index ] = interpreter.recurse( expressionStatement.expression, false, create );\n            } );\n            fn = function( base, value ){\n                var lastValue;\n                \n                forEach( expressions, function( expression ){\n                    lastValue = expression( base, value );\n                } );\n                \n                return lastValue;\n            };\n            break;\n    }\n    \n    return fn;\n};\n\nInterpreter.prototype.recurse = function( node, context, create ){\n    var interpreter = this,\n        isRightMost = false,\n        \n        args, fn, left, right;\n    \n    switch( node.type ){\n        case 'ArrayExpression': {\n            args = intepretList( interpreter, node.elements, false );\n            isRightMost = node.range[ 1 ] === interpreter.eol;\n            return function getArrayExpression( base, value ){\n                //console.log( 'Getting ARRAY EXPRESSION' );\n                var result = [], name;\n                forEach( args, function( arg, index ){\n                    name = arg( base, value );\n                    if( create && !( name in base ) ){\n                        base[ name ] = isRightMost ?\n                            value :\n                            {};\n                    }\n                    result[ index ] = base[ name ];\n                } );\n                \n                if( result.length === 1 ){\n                    result = result[ 0 ];\n                }\n                //console.log( '- ARRAY EXPRESSION RESULT', result );\n                return context ?\n                    { value: result } :\n                    result;\n            };\n        }\n        case 'CallExpression': {\n            args = intepretList( interpreter, node.arguments, false );\n            right = interpreter.recurse( node.callee, true, create );\n            \n            return function getCallExpression( base, value ){\n                //console.log( 'Getting CALL EXPRESSION' );\n                //console.log( '- RIGHT', right.name );\n                var values = [],\n                    rhs = right( base, value ),\n                    result;\n                //console.log( '- RHS', rhs );\n                if( typeof rhs.value === 'function' ){\n                    values = [];\n                    \n                    forEach( args, function( arg, index ){\n                        values[ index ] = arg( base );\n                    } );\n                    \n                    result = rhs.value.apply( rhs.context, values );\n                } else if( create && typeof rhs.value === 'undefined' ){\n                    throw new Error( 'cannot create call expressions' );\n                } else {\n                    throw new TypeError( 'call expression must be a function' );\n                }\n                //console.log( '- CALL RESULT', result );\n                return context ?\n                    { value: result }:\n                    result;\n            };\n        }\n        \n        case 'ExpressionStatement': {\n            left = interpreter.recurse( node.expression, context, create );\n            return function getExpressionStatement( base, value ){\n                //console.log( 'Getting EXPRESSION STATEMENT' );\n                //console.log( '- EXPRESSION STATEMENT LEFT', left.name );\n                var result = left( base, value );\n                //console.log( '- EXPRESSION STATEMENT RESULT', result );\n                return result;\n            };\n        }\n        \n        case 'Identifier': {\n            return function getIdentifier( base, value ){\n                //console.log( 'Getting IDENTIFIER' );\n                var name = node.name,\n                    result;\n                if( typeof base !== 'undefined' ){\n                    if( create && !( name in base ) ){\n                        base[ name ] = node.order === 1 ?\n                            value :\n                            {};\n                    }\n                    result = base[ name ];\n                }\n                //console.log( '- NAME', name );\n                //console.log( '- IDENTIFIER RESULT', result );\n                return context ?\n                    { context: base, name: name, value: result } :\n                    result;\n            };\n        }\n        case 'Literal': {\n            return function getLiteral( base ){\n                var result = node.value;\n                //console.log( 'Getting LITERAL' );\n                //console.log( '- LITERAL RESULT', result );\n                return context ?\n                    { context: undefined, name: undefined, value: result } :\n                    result;\n            };\n        }\n        case 'MemberExpression': {\n            left = interpreter.recurse( node.object, false, create );\n            isRightMost = node.property.range[ 1 ] + 1 === interpreter.eol;\n            // Computed\n            if( node.computed ){\n                right = interpreter.recurse( node.property, false, create );\n                fn = function getComputedMember( base, value ){\n                    //console.log( 'Getting COMPUTED MEMBER' );\n                    //console.log( '- COMPUTED LEFT', left.name );\n                    //console.log( '- COMPUTED RIGHT', right.name );\n                    var lhs = left( base, value ),\n                        result, rhs;\n                    //console.log( '- COMPUTED LHS', lhs );\n                    if( typeof lhs !== 'undefined' ){\n                        rhs = right( base, value );\n                        //console.log( '- COMPUTED RHS', rhs );\n                        if( Array.isArray( lhs ) ){\n                            result = [];\n                            \n                            if( Array.isArray( rhs ) ){\n                                forEach( rhs, function( item, index ){\n                                    if( create && !( item in lhs ) ){\n                                        lhs[ item ] = isRightMost ?\n                                            value :\n                                            {};\n                                    }\n                                    result[ index ] = lhs[ item ];\n                                } );\n                                //console.log( '-- LIST:LIST', result );\n                            } else {\n                                if( typeof rhs === 'number' ){\n                                    if( create && !( rhs in lhs ) ){\n                                        lhs[ rhs ] = isRightMost ?\n                                            value :\n                                            {};\n                                    }\n                                    result[ 0 ] = lhs[ rhs ];\n                                } else {\n                                    forEach( lhs, function( item, index ){\n                                        if( create && !( rhs in item ) ){\n                                            item[ rhs ] = isRightMost ?\n                                                value :\n                                                {};\n                                        }\n                                        result[ index ] = item[ rhs ];\n                                    } );\n                                }\n                                //console.log( '-- LIST:VALUE', result );\n                            }\n                            \n                            if( result.length === 1 ){\n                                result = result[ 0 ];\n                            }\n                        } else if( Array.isArray( rhs ) ){\n                            result = [];\n                            forEach( rhs, function( item, index ){\n                                if( create && !( item in lhs ) ){\n                                    lhs[ item ] = isRightMost ?\n                                        value :\n                                        {};\n                                }\n                                result[ index ] = lhs[ item ];\n                            } );\n                            //console.log( '-- VALUE:LIST', result );\n                            if( result.length === 1 ){\n                                result = result[ 0 ];\n                            }\n                        } else {\n                            if( create && !( rhs in lhs ) ){\n                                lhs[ rhs ] = isRightMost ?\n                                    value :\n                                    {};\n                            }\n                            result = lhs[ rhs ];\n                            //console.log( '-- VALUE:VALUE', result );\n                        }\n                    }\n                    //console.log( '- COMPUTED RESULT', result );\n                    return context ?\n                        { context: lhs, name: rhs, value: result } :\n                        result;\n                };\n            \n            // Non-computed\n            } else {\n                right = node.property.name;\n                isRightMost = node.property.range[ 1 ] === interpreter.eol;\n                fn = function getNonComputedMember( base, value ){\n                    //console.log( 'Getting NON-COMPUTED MEMBER' );\n                    //console.log( '- NON-COMPUTED LEFT', left.name );\n                    //console.log( '- NON-COMPUTED RIGHT', right );\n                    var lhs = left( base, value ),\n                        result;\n                    //console.log( '- NON-COMPUTED LHS', lhs );\n                    if( typeof lhs !== 'undefined' ){\n                        if( Array.isArray( lhs ) ){\n                            result = [];\n                            forEach( lhs, function( item, index ){\n                                if( create && !( right in item ) ){\n                                    item[ right ] = isRightMost ?\n                                        value :\n                                        {};\n                                }\n                                result[ index ] = item[ right ];\n                            } );\n                            //console.log( '-- LIST:VALUE', result );\n                        } else {\n                            if( create && !( right in lhs ) ){\n                                lhs[ right ] = isRightMost ?\n                                    value :\n                                    {};\n                            }\n                            result = lhs[ right ];\n                            //console.log( '-- VALUE:VALUE', result );\n                        }\n                    }\n                    //console.log( '- NON-COMPUTED RESULT', result );\n                    return context ?\n                        { context: lhs, name: right, value: result } :\n                        result;\n                };\n            }\n            \n            return fn;\n        }\n        case 'SequenceExpression': {\n            args = intepretList( interpreter, node.expressions, false );\n            \n            return function getSequenceExpression( base, value ){\n                //console.log( 'Getting SEQUENCE EXPRESSION' );\n                var result = [];\n                forEach( args, function( arg, index ){\n                    result[ index ] = arg( base );\n                } );\n                //console.log( '- SEQUENCE RESULT', result );\n                return context ?\n                    { value: result } :\n                    result;\n            };\n        }\n        default:\n            this.throwError( 'Unknown node type ' + node.type );\n    }\n};\n\nInterpreter.prototype.throwError = function( message ){\n    throw new Error( message );\n};\n\nexport { Interpreter as default };"],"names":[],"mappings":"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","sourceRoot":"/source/"}